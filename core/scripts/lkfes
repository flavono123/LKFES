#!/usr/bin/env python3
# -*-coding:utf-8-*-

import json
import sys
import os
import argparse


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def print_help():
    print("TODO : print_help")


def shell_command(command, error_str='', print_on_error=True, exit_on_error=True):
    ret = os.system(command)
    if ret:
        if print_on_error:
            if error_str:
                eprint(error_str)
            else:
                eprint("failed : " + command)
        if exit_on_error:
            exit(1)
    return ret


if len(sys.argv) < 1:
    eprint("faild : missing required argument.")
    print_help()
    exit(1)

abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
project_root = dname + '/../..'
# os.chdir(dname+'/../..') #project root dir

parser = argparse.ArgumentParser(description='Linux Kerenl Feature Evaluation System : '
                                             'by referring the config file, proceed kernel feature evaluation'
                                             '(compile, run the script, report, ...)')

parser.add_argument('vm', help='(.vmx) vmware machine on which the evaluations is executed')
parser.add_argument('ssh_key',help='ssh-key to vmware guest(rsa)')
parser.add_argument('eval_fname',help='evalution feature name in config file')
parser.add_argument('-cp', '--config_path', help="location of config gile. default : (ROOT)/core/sciprts/feature_eval.conf",
                    default=project_root + '/core/scripts/feature_eval.conf')

args = parser.parse_args()

vmx = args.vm
rsa_key = args.ssh_key
eval_fname = args.eval_fname
conf_path = args.config_path

# TODO conf_path를 실행 디렉토리랑 상관없이 읽을 수 있도록 해야함.

features = ''
try:
    feconf_file = open(conf_path, 'r')
    features = json.load(feconf_file)
    feconf_file.close()
except ValueError:
    eprint(conf_path + ' is not valid.')
    exit(1)
except IOError:
    eprint(conf_path + ' is not found.')
    exit(1)

feature = ''
try:
    feature = features[eval_fname]
except KeyError:
    eprint(eval_fname + " information does not exists in %s." % conf_path)
    exit(1)

print(feature)
eval_dir = feature['evaluation_dir']
before_img = feature['before']
after_img = feature['after']

scripts_path = project_root + '/core/scripts/'
kfe_path = scripts_path + 'kfeature-eval'

version = before_img['version']
configs = before_img['config']
eval_script = before_img['eval_script_name']
configs_string = ''
if configs:
    configs_string = '-c ' + ' '.join([k + '=' + v for k, v in configs.items()])
command = '{0} {1} -e "{2}" "{3}" "{4}" "{5}" "{6}" "{7}" "{8}" -sl'.format(kfe_path, configs_string,
                                                                            eval_fname + '-before', vmx, rsa_key,
                                                                            eval_fname, version,
                                                                            eval_dir + '/' + eval_script, 'before.log')
print(command)
shell_command(command)

version = after_img['version']
configs = after_img['config']
eval_script = after_img['eval_script_name']
configs_string = ''
if configs:
    configs_string = '-c ' + ' '.join([k + '=' + v for k, v in configs.items()])
command = '{0} {1} -e "{2}" "{3}" "{4}" "{5}" "{6}" "{7}" "{8}" -sl'.format(kfe_path, configs_string,
                                                                            eval_fname + '-after', vmx, rsa_key,
                                                                            eval_fname, version,
                                                                            eval_dir + '/' + eval_script, 'after.log')
print(command)
shell_command(command)

b_report = input('Want to re'
                 ''                 'port result of feature evaluation to LKFES-report system?(Y/n)')

if b_report != 'n':
    import requests
    import shutil
    title = input('title(default : feature name) : ')
    if not title:
        title = eval_fname
    desc = input('description : ')
    reporter = input('your name? : ')
    # sw_specs = dict()
    # hw_specs = None
    # with open(project_root+'/logs/'+eval_fname+'/before.log.sw_spec') as f:
    #     sw_specs['before'] = json.load(f)
    # with open(project_root+'/logs/'+eval_fname+'/after.log.sw_spec') as f:
    #     sw_specs['after'] = json.load(f)
    # with open(project_root+'/logs/'+eval_fname+'/'+eval_fname+'.hw_spec') as f:
    #     hw_specs = json.load(f)
    url = 'http://104.199.211.38/report/post/'
    data = {'title': title, 'desc' : desc, 'reporter': reporter}

    before_log = open(project_root+'/logs/'+eval_fname+'/before.log')
    after_log = open(project_root+'/logs/'+eval_fname+'/after.log')
    hw_specs = open(project_root+'/logs/'+eval_fname+'/hw_spec')
    before_sw_specs = open(project_root+'/logs/'+eval_fname+'/before.log.sw_spec')
    after_sw_specs = open(project_root+'/logs/'+eval_fname+'/after.log.sw_spec')
    print("archiving extra files..")
    zip_file = shutil.make_archive('extra', 'zip', base_dir=eval_dir)
    extra_zip = open(zip_file, 'rb')
    files = {'log-before' : before_log, 'log-after' : after_log, 'extra' : extra_zip,
             'before-sw-specs' : before_sw_specs, 'after-sw-specs' : after_sw_specs, 'hw-specs' : hw_specs}

    print("sending data to server..")
    try:
        requests.post(url, files=files, data=data)
    except requests.exceptions.RequestException as e:
        eprint("failed : reporting to server")
        eprint(e)
    before_log.close()
    after_log.close()
    extra_zip.close()
    before_sw_specs.close()
    after_sw_specs.close()
    hw_specs.close()
    os.remove(zip_file)

    print("done")


